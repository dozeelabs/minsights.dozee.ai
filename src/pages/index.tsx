import { parseCookie } from "../utils/Auth";
import { AlertSummary, OrgNamesApiResponse } from "../types/apiResponse/apis";
import { useState, useMemo, useEffect } from "react";
import { AlertPageProps } from "../types/pageProps/pageProps";
import { getAlertSummary } from "../utils/package/serverSideApiCalls";
import AlertSummaryBox from "../components/Alerts/AlertSummaryBox";
import { getOrgName } from "../utils/package/serverSideApiCalls";
import AlertTableUi from "../components/Alerts/AlertTableUi";
import jwtDecode from "jwt-decode";
import Head from "next/head";

export async function getServerSideProps<GetServerSideProps>(context: any) {
  const { AccessToken } = parseCookie(context.req.headers.cookie);
  let decode: any = jwtDecode(AccessToken);
  decode = decode.sub;
  decode = JSON.parse(decode);
  try {
    const alertData = await getAlertSummary(AccessToken);
    let data: AlertSummary[] = alertData.data;
    //sort the data in decending order in terms of number of allerts generated in an org
    data.sort((a, b) => {
      return b.Sum > a.Sum ? 1 : -1;
    });
    let set = new Set<string>();
    data.forEach((i) => {
      set.add(i.OrganizationId);
    });
    let url = "";
    set.forEach((i) => {
      url += i + ",";
    });
    const orgNames = await getOrgName(url.slice(0, -1));
    const names: OrgNamesApiResponse[] = orgNames.data;

    let namesMap: any = {};
    names.forEach((name) => {
      namesMap[name.OrganizationId] = name.OrganizationName;
    });

    let finalData = data.map((org) => {
      return { ...org, OrganizationName: namesMap[org.OrganizationId] };
    });

    return {
      props: {
        alertData: finalData,
        userName: decode["FirstName"],
      },
    };
  } catch {
    // return {
    //   redirect: {
    //     destination: "/detection",
    //     permanent: false,
    //   },
    // };
    return {
      props: {
        alertData: [],
        userName: decode["FirstName"],
      },
    };
  }
}

export default function Home({ alertData, userName }: AlertPageProps) {
  const [date, setDate] = useState(new Date().toLocaleDateString("fr-CA"));

  const alertDataForSelectedDate = useMemo(() => {
    return alertData.filter((org) => org.Date === date);
  }, [date]);

  //calculate number of alerts in a day
  const totalAlertsInaDay = useMemo(() => {
    const total = alertDataForSelectedDate.reduce((sum, i) => {
      return sum + i.Sum;
    }, 0);
    return total;
  }, [alertDataForSelectedDate]);
  // useEffect(() => {
  //   window.location.replace(`${window.location.href}/detection`);
  // }, []);

  //calculate the number of pages to paginated the data

  return (
    <>
      <Head>
        <title>Alerts</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="h-[896px]">
        <div className="p-4 max-w-[1800px] m-auto flex flex-col  overflow-hidden">
          <div className="flex flex-row justify-between">
            <div className="flex flex-row-reverse pb-5">
              <input
                type="date"
                value={date}
                onChange={(e) => setDate(e.target.value)}
                className="border-none rounded-lg bg-gray-100 "
              />
            </div>
            <h3 className="font-medium p-2">Hello, {userName}</h3>
          </div>
          <AlertSummaryBox
            totalOrgs={alertDataForSelectedDate?.length}
            totalAlertsInaDay={totalAlertsInaDay}
            date={date}
            setDate={setDate}
          />
          <AlertTableUi
            date={date}
            alertDataForSelectedDate={alertDataForSelectedDate}
          />
        </div>
      </main>
    </>

  );
}