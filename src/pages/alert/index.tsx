import Head from "next/head";
import React, { useMemo, useState } from "react";
import { getServerSession } from "next-auth";
import { useRouter } from "next/router";
import { authOptions } from "../api/auth/[...nextauth]";
import {
  getAlertSummary,
  getOrgName,
} from "../../../utils/package/serverSideApiCalls";
import { AlertSummary } from "../../../types/apiResponse/apis";
import { AlertOrgPageProps } from "../../../types/pageProps/pageProps";
import AlertOrgSummary from "@/components/Alerts/orgLevel/AlertOrgSummary";
import AlertOrgTable from "@/components/Alerts/orgLevel/AlertOrgTable";

const paginationConstant = 6;

export async function getServerSideProps<GetServerSideProps>(context: any) {
  const session = await getServerSession(context.req, context.res, authOptions);
  //check wheather user loged in or not

  if (session) {
    const orgId = context.query.orgId;
    if (!orgId) {
      //if org is not selected navigate to index page
      return {
        redirect: {
          destination: "/",
          permanent: false,
        },
      };
    }
    try {
      const summaryData = await getAlertSummary(session.user.AccessToken);
      const orgname = await getOrgName(context.query.orgId);
      const orgData: AlertSummary[] = summaryData.data.filter(
        (org: AlertSummary) => {
          return org.OrganizationId === orgId;
        }
      );

      return {
        props: {
          orgName: orgname.data[0].OrganizationName,
          date: context.query.date ? context.query.date : null,
          data: orgData,
        },
      };
    } catch {
      return {
        redirect: {
          destination: "/",
          permanent: false,
        },
      };
    }
  }
  return {
    redirect: {
      destination: "/auth/signInPage",
      permanent: false,
    },
  };
}

function Index({ orgName, date, data }: AlertOrgPageProps) {
  const [dateInput, setDateInput] = useState(
    date ? date : new Date().toLocaleDateString("fr-CA")
  );

  const alertDataForSelectedDate = useMemo(() => {
    const status: AlertSummary[] = data.filter((org) => {
      return org.Date === dateInput;
    });

    return status;
  }, [dateInput]);

  return (
    <>
      <Head>
        <title>Alerts</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="h-[896px]">
        <div className="p-4 max-w-[1800px] m-auto flex flex-col  overflow-hidden">

          <div className="flex flex-row justify-between">
            <div className="flex flex-row-reverse pb-5">
              <input
                type="date"
                value={dateInput}
                onChange={(e) => {
                  setDateInput(e.target.value);
                }}
                className="border-none rounded-lg bg-gray-100 "
              />
            </div>
          </div>
          <AlertOrgSummary
            orgName={orgName}
            dateInput={dateInput}
            setDateInput={setDateInput}
            alertDataForSelectedDate={alertDataForSelectedDate}
          />
          <AlertOrgTable
            alertDataForSelectedDate={alertDataForSelectedDate}
            dateInput={dateInput}
          />
        </div>
      </main>
    </>
   );
}

export default Index;
