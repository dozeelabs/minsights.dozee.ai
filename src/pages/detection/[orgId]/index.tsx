import Head from "next/head";
import React, { useMemo, useState } from "react";
import { authOptions } from "@/pages/api/auth/[...nextauth]";
import { getServerSession } from "next-auth";
import { DetectionSummaryResponse } from "../../../../types/apiResponse/apis";
import { getDetectionSummary, getOrgName } from "../../../../utils/package/serverSideApiCalls";
import { useRouter } from "next/router";
import { detectionDataModificationOrgLevel } from "../../../../utils/detectionDataModification";
import DetectionTableUi from "@/components/Detection/orglevel/DetectionTableUi";
import SummaryBox from "@/components/Detection/orglevel/summaryBox";

const paginationConstant = 5;
interface Props {
  data: DetectionSummaryResponse[];
  date: string;
  orgName: string;
}
export async function getServerSideProps<GetServerSideProps>(context: any) {
  const session = await getServerSession(context.req, context.res, authOptions);

  if (!session) {
    //user is not logged in this this will redirect to the sigin page
    return {
      redirect: {
        destination: "/auth/signInPage",
        permanent: false,
      },
    };
  }
  try {
    let orgData = await getDetectionSummary(session.user.AccessToken);
    const name = await getOrgName(context.query.orgId);

    const filteredData: DetectionSummaryResponse[] = orgData.data.filter(
      (org: DetectionSummaryResponse) => {
        return org.OrganizationId === context.query.orgId;
      }
    );

    if (filteredData.length === 0) {
      return {
        redirect: {
          destination: "/detection",
          permanent: false,
        },
      };
    }
    return {
      props: {
        data: filteredData,
        date: context.query.date,
        orgName: name.data[0].OrganizationName,
      },
    };
  } catch {
    return {
      redirect: {
        destination: "/detection",
        permanent: false,
      },
    };
  }
}
function Index({ data, date, orgName }: Props) {
  const [dateInput, setDateInput] = useState(
    date ? date : new Date().toLocaleDateString("fr-CA")
  );

  const [page, setPage] = useState(0);

  const usefullData = useMemo(() => {
    return detectionDataModificationOrgLevel(data);
  }, []);
  const dataForSelecetdDate = useMemo(() => {
    return usefullData[dateInput] || [];
  }, [dateInput]);

  return (
    <>
      <Head>
        <title>Detection</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
      <SummaryBox
        totaluser={dataForSelecetdDate?.length}
        orgName={orgName}
        setPage={setPage}
        setDateInput={setDateInput}
        dateInput={dateInput}
        data={data}
      />
      <DetectionTableUi dataForSelecetdDate={dataForSelecetdDate} />
    </div>
    </>
  );
}

export default Index;