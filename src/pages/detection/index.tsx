import Head from "next/head";
import React, { useEffect, useMemo, useState } from "react";
import { authOptions } from "../api/auth/[...nextauth]";
import { getServerSession } from "next-auth/next";
import { DetectionSummaryResponse, OrgNamesApiResponse, ModifiedDetectionData } from "../../../types/apiResponse/apis";
import { detectionPageProps } from "../../../types/pageProps/pageProps";
import { getDetectionSummary, getOrgName } from "../../../utils/package/serverSideApiCalls";
import DetectionSummaryBox from "@/components/Detection/DetectionSummaryBox";
import DetectionTableUi from "@/components/Detection/DetectionTableUi";
import detectionDataModification from "../../../utils/detectionDataModification";

export async function getServerSideProps<GetServerSideProps>(context: any) {
  const session = await getServerSession(context.req, context.res, authOptions);

  if (!session) {
    //user is not logged in this this will redirect to the sigin page
    return {
      redirect: {
        destination: "/auth/signInPage",
        permanent: false,
      },
    };
  }
  try {
    let DetectionData = await getDetectionSummary(session.user.AccessToken);

    let sortedData = DetectionData.data;
    let set = new Set<string>();
    sortedData.forEach((i: DetectionSummaryResponse) => {
      set.add(i.OrganizationId);
    });
    let url = "";
    set.forEach((i) => {
      url += i + ",";
    });

    const orgNames = await getOrgName(url.slice(0, -1));
    const names: OrgNamesApiResponse[] = orgNames.data;

    let namesMap: any = {};
    names.forEach((name) => {
      namesMap[name.OrganizationId] = name.OrganizationName;
    });

    let includeOrgNameInData = sortedData.map(
      (org: DetectionSummaryResponse) => {
        return { ...org, OrganizationName: namesMap[org.OrganizationId] };
      }
    );

    return {
      props: {
        data: includeOrgNameInData,
      },
    };
  } catch {
    return {
      props: {
        error: "error",
      },
    };
  }
}

function Index({ data }: detectionPageProps) {
  const [dateInput, setDateInput] = useState(
    new Date().toLocaleDateString("fr-CA")
  );
  const ModifiedDetectionData = useMemo(() => {
    return detectionDataModification(data);
  }, [data]);
  const detectionDataForSelectedDate: ModifiedDetectionData[] = useMemo(() => {
    return ModifiedDetectionData[dateInput];
  }, [dateInput, ModifiedDetectionData]);

  return (
    <>
      <Head>
        <title>Detection</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="h-[896px]">
        <div className="p-4 max-w-[1800px] m-auto flex flex-col  overflow-hidden">
          <div className="flex flex-row justify-between">
            <div className="flex flex-row-reverse pb-5">
              <input
                type="date"
                value={dateInput}
                onChange={(e) => {
                  setDateInput(e.target.value);
                }}
                className="border-none rounded-lg bg-gray-100 "
              />
            </div>
          </div>
          <DetectionSummaryBox
            dateInput={dateInput}
            setDateInput={setDateInput}
            detectionDataForSelectedDate={detectionDataForSelectedDate}
          />
          <DetectionTableUi
            dateInput={dateInput}
            detectionDataForSelectedDate={detectionDataForSelectedDate}
          />

        </div>
      </main>
    </>
  );
}

export default Index;